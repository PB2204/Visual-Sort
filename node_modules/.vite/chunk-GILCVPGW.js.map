{
  "version": 3,
  "sources": ["../@material-ui/core/esm/utils/useIsFocusVisible.js"],
  "sourcesContent": ["// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nvar hadKeyboardEvent = true;\nvar hadFocusVisibleRecently = false;\nvar hadFocusVisibleRecentlyTimeout = null;\nvar inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n/**\n * Computes whether the given element should automatically trigger the\n * `focus-visible` class being added, i.e. whether it should always match\n * `:focus-visible` when focused.\n * @param {Element} node\n * @return {boolean}\n */\n\nfunction focusTriggersKeyboardModality(node) {\n  var type = node.type,\n      tagName = node.tagName;\n\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n\n  if (node.isContentEditable) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\n * If the most recent user interaction was via the keyboard;\n * and the key press did not include a meta, alt/option, or control key;\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\n * @param {KeyboardEvent} event\n */\n\n\nfunction handleKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  hadKeyboardEvent = true;\n}\n/**\n * If at any point a user clicks with a pointing device, ensure that we change\n * the modality away from keyboard.\n * This avoids the situation where a user presses a key on an already focused\n * element, and then clicks on a different element, focusing it with a\n * pointing device, while we still think we're in keyboard modality.\n */\n\n\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\n\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\n\nfunction prepare(doc) {\n  doc.addEventListener('keydown', handleKeyDown, true);\n  doc.addEventListener('mousedown', handlePointerDown, true);\n  doc.addEventListener('pointerdown', handlePointerDown, true);\n  doc.addEventListener('touchstart', handlePointerDown, true);\n  doc.addEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nexport function teardown(doc) {\n  doc.removeEventListener('keydown', handleKeyDown, true);\n  doc.removeEventListener('mousedown', handlePointerDown, true);\n  doc.removeEventListener('pointerdown', handlePointerDown, true);\n  doc.removeEventListener('touchstart', handlePointerDown, true);\n  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nfunction isFocusVisible(event) {\n  var target = event.target;\n\n  try {\n    return target.matches(':focus-visible');\n  } catch (error) {} // browsers not implementing :focus-visible will throw a SyntaxError\n  // we use our own heuristic for those browsers\n  // rethrow might be better if it's not the expected error but do we really\n  // want to crash if focus-visible malfunctioned?\n  // no need for validFocusTarget check. the user does that by attaching it to\n  // focusable events only\n\n\n  return hadKeyboardEvent || focusTriggersKeyboardModality(target);\n}\n/**\n * Should be called if a blur event is fired on a focus-visible element\n */\n\n\nfunction handleBlurVisible() {\n  // To detect a tab/window switch, we look for a blur event followed\n  // rapidly by a visibility change.\n  // If we don't see a visibility change within 100ms, it's probably a\n  // regular focus change.\n  hadFocusVisibleRecently = true;\n  window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n  hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n    hadFocusVisibleRecently = false;\n  }, 100);\n}\n\nexport default function useIsFocusVisible() {\n  var ref = React.useCallback(function (instance) {\n    var node = ReactDOM.findDOMNode(instance);\n\n    if (node != null) {\n      prepare(node.ownerDocument);\n    }\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue(isFocusVisible);\n  }\n\n  return {\n    isFocusVisible: isFocusVisible,\n    onBlurVisible: handleBlurVisible,\n    ref: ref\n  };\n}"],
  "mappings": ";;;;;;;;;;;AACA,YAAuB;AACvB,eAA0B;AAC1B,IAAI,mBAAmB;AACvB,IAAI,0BAA0B;AAC9B,IAAI,iCAAiC;AACrC,IAAI,sBAAsB;AAAA,EACxB,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,KAAK;AAAA,EACL,KAAK;AAAA,EACL,OAAO;AAAA,EACP,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,OAAO;AAAA,EACP,MAAM;AAAA,EACN,MAAM;AAAA,EACN,UAAU;AAAA,EACV,kBAAkB;AAAA;AAUpB,uCAAuC,MAAM;AAC3C,MAAI,OAAO,KAAK,MACZ,UAAU,KAAK;AAEnB,MAAI,YAAY,WAAW,oBAAoB,SAAS,CAAC,KAAK,UAAU;AACtE,WAAO;AAAA;AAGT,MAAI,YAAY,cAAc,CAAC,KAAK,UAAU;AAC5C,WAAO;AAAA;AAGT,MAAI,KAAK,mBAAmB;AAC1B,WAAO;AAAA;AAGT,SAAO;AAAA;AAWT,uBAAuB,OAAO;AAC5B,MAAI,MAAM,WAAW,MAAM,UAAU,MAAM,SAAS;AAClD;AAAA;AAGF,qBAAmB;AAAA;AAWrB,6BAA6B;AAC3B,qBAAmB;AAAA;AAGrB,kCAAkC;AAChC,MAAI,KAAK,oBAAoB,UAAU;AAKrC,QAAI,yBAAyB;AAC3B,yBAAmB;AAAA;AAAA;AAAA;AAKzB,iBAAiB,KAAK;AACpB,MAAI,iBAAiB,WAAW,eAAe;AAC/C,MAAI,iBAAiB,aAAa,mBAAmB;AACrD,MAAI,iBAAiB,eAAe,mBAAmB;AACvD,MAAI,iBAAiB,cAAc,mBAAmB;AACtD,MAAI,iBAAiB,oBAAoB,wBAAwB;AAAA;AAWnE,wBAAwB,OAAO;AAC7B,MAAI,SAAS,MAAM;AAEnB,MAAI;AACF,WAAO,OAAO,QAAQ;AAAA,WACf,OAAP;AAAA;AAQF,SAAO,oBAAoB,8BAA8B;AAAA;AAO3D,6BAA6B;AAK3B,4BAA0B;AAC1B,SAAO,aAAa;AACpB,mCAAiC,OAAO,WAAW,WAAY;AAC7D,8BAA0B;AAAA,KACzB;AAAA;AAGU,6BAA6B;AAC1C,MAAI,MAAM,AAAM,kBAAY,SAAU,UAAU;AAC9C,QAAI,OAAO,AAAS,qBAAY;AAEhC,QAAI,QAAQ,MAAM;AAChB,cAAQ,KAAK;AAAA;AAAA,KAEd;AAEH,MAAI,MAAuC;AAEzC,IAAM,oBAAc;AAAA;AAGtB,SAAO;AAAA,IACL;AAAA,IACA,eAAe;AAAA,IACf;AAAA;AAAA;",
  "names": []
}
