import { createContext as createContext$1, useRef, createElement, useContext } from 'react';

function createContext() {
  const ZustandContext = createContext$1(void 0);
  const Provider = ({
    initialStore,
    children
  }) => {
    const storeRef = useRef();
    if (!storeRef.current) {
      storeRef.current = initialStore;
    }
    return createElement(ZustandContext.Provider, {value: storeRef.current}, children);
  };
  const useStore = (selector, equalityFn = Object.is) => {
    const useProviderStore = useContext(ZustandContext);
    if (!useProviderStore) {
      throw new Error("Seems like you have not used zustand provider as an ancestor.");
    }
    return useProviderStore(selector, equalityFn);
  };
  const useStoreApi = () => {
    const useProviderStore = useContext(ZustandContext);
    if (!useProviderStore) {
      throw new Error("Seems like you have not used zustand provider as an ancestor.");
    }
    return {
      getState: useProviderStore.getState,
      setState: useProviderStore.setState,
      subscribe: useProviderStore.subscribe,
      destroy: useProviderStore.destroy
    };
  };
  return {
    Provider,
    useStore,
    useStoreApi
  };
}

export default createContext;
